Index: FrontEnd/mint/src/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import SockJS from 'sockjs-client';\r\nimport * as StompJS from '@stomp/stompjs';\r\n\r\nconst userNickName = \"moonjar\";\r\nconst email = \"moonjar@gmail.com\"\r\nconst messagePath = \"/app/busking\"\r\n// const socket = new SockJS(\"ws://127.0.0.1:8080\")\r\nconst stompClient = new StompJS.Client({\r\n    brokerURL:\"ws://127.0.0.1:8080/busking\"\r\n});\r\nconst video = document.querySelector(\"video\");\r\nconst constraints = {video: true, audio: false}\r\n\r\nlet iceServers\r\nlet pcConfig\r\nlet pc\r\n\r\n\r\nwindow.onload = () => {\r\n    document.getElementById(\"cameraOnButton\").addEventListener(\"click\", cameraOn)\r\n    document.getElementById(\"boardCast\").addEventListener(\"click\", broadCast)\r\n\r\n    iceServers = iceServerInit();\r\n    stompInit()\r\n    pcConfig = {iceServers}\r\n    pc = new RTCPeerConnection(pcConfig);\r\n}\r\n\r\nconst sendMessage = (message) =>{\r\n    stompClient.publish({\r\n        destination : messagePath+\"/test\",\r\n        body: message,\r\n        headers:{}\r\n    })\r\n}\r\n\r\nconst cameraOn = () => {\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n        .then((stream) => {\r\n            const videoTrack = stream.getVideoTracks();\r\n            // const audioTrack = stream.getAudioTracks();\r\n            console.log(\"Your stream is gotten.\", constraints)\r\n            for (const mediaVideoTrack of videoTrack) {\r\n                pc.addTrack(mediaVideoTrack);\r\n            }\r\n            // 오디오 출력은 쓸 일 없어서 안함.\r\n            // for (const mediaAudioTrack of audioTrack) {\r\n            //     pc.addTrack(mediaAudioTrack);\r\n            // }\r\n\r\n            stream.onremovetrack = () => {\r\n                console.log(\"your stream is done\");\r\n            }\r\n\r\n            video.srcObject = stream;\r\n        }).catch((error) => {\r\n        if (error.name === \"OverconstrainedError\") {\r\n            console.error(\r\n                `The resolution ${constraints.video.width.exact}x${constraints.video.height.exact} px is not supported by your device.`,\r\n            );\r\n        } else if (error.name === \"NotAllowedError\") {\r\n            console.error(\r\n                \"You need to grant this page permission to access your camera and microphone.\",\r\n            );\r\n        } else {\r\n            console.error(`getUserMedia error: ${error.name}`, error);\r\n        }\r\n    });\r\n}\r\n\r\nconst broadCast = async () => {\r\n    console.log(\"방송 버튼 눌림\")\r\n    sendMessage(\"hello world\")\r\n    sendMessage(\"방송버튼 눌림\")\r\n    pc.createOffer()\r\n        .then(sdp => pc.setLocalDescription(sdp))\r\n        .catch(error => console.log(error));\r\n    // pc.onicecandidate\r\n\r\n    // let rtcSessionDescription =  await pc.setLocalDescription();\r\n    // pc.setRemoteDescription(rtcSessionDescription).then(r => );\r\n}\r\n\r\nconst stompInit = () => {\r\n\r\n    if ( typeof WebSocket !== 'function'){\r\n        console.log(\"no websocket\")\r\n        stompClient.webSocketFactory = function (){\r\n            return new SockJS(\"ws://127.0.0.1:8080/busking\")\r\n        }\r\n    }\r\n\r\n    stompClient.onConnect = function (frame) {\r\n        console.log(frame)\r\n        stompClient.subscribe(\"/audience\", message =>\r\n        console.log(message))\r\n    }\r\n    stompClient.onStompError = function (frame) {\r\n        console.log('Broker reported error: ' + frame.headers['message'])\r\n        console.log('Additional details: ' + frame.body)\r\n    }\r\n\r\n    stompClient.activate()\r\n}\r\nconst iceServerInit=()=>{\r\n    let iceServers = []\r\n\r\n    const urls = [\r\n        \"stun.l.google.com:19302\",\r\n        \"stun1.l.google.com:19302\",\r\n        \"stun2.l.google.com:19302\",\r\n        \"stun3.l.google.com:19302\",\r\n        \"stun4.l.google.com:19302\",\r\n        \"stun.ekiga.net\",\r\n        \"stun.ideasip.com\",\r\n        \"stun.schlund.de\",\r\n        \"stun.stunprotocol.org:3478\",\r\n        \"stun.voiparound.com\",\r\n        \"stun.voipbuster.com\",\r\n        \"stun.voipstunt.com\",\r\n        \"stun.voxgratia.org\"\r\n    ];\r\n    const turnServers = [\r\n        {\r\n            url: 'turn:numb.viagenie.ca',\r\n            credential: 'muazkh',\r\n            username: 'webrtc@live.com'\r\n        },\r\n        {\r\n            url: 'turn:192.158.29.39:3478?transport=udp',\r\n            credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n            username: '28224511:1379330808'\r\n        },\r\n        {\r\n            url: 'turn:192.158.29.39:3478?transport=tcp',\r\n            credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n            username: '28224511:1379330808'\r\n        },\r\n        {\r\n            url: 'turn:turn.bistri.com:80',\r\n            credential: 'homeo',\r\n            username: 'homeo'\r\n        },\r\n        {\r\n            url: 'turn:turn.anyfirewall.com:443?transport=tcp',\r\n            credential: 'webrtc',\r\n            username: 'webrtc'\r\n        }]\r\n\r\n    for (const url of urls) {\r\n        iceServers.push({urls: `stun:${url}`});\r\n        // 또는 TURN 서버를 사용하려면 \"turn:${url}\"과 같이 변경할 수 있습니다.\r\n    }\r\n    for (const server of turnServers) {\r\n        iceServers.push({\r\n            urls: server.url,\r\n            credential: server.credential,\r\n            username: server.username\r\n        });\r\n    }\r\n\r\n    return iceServers\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FrontEnd/mint/src/index.js b/FrontEnd/mint/src/index.js
--- a/FrontEnd/mint/src/index.js	(revision c015c7a0a186cc0ea71626e5bb3a613248256d1b)
+++ b/FrontEnd/mint/src/index.js	(date 1706502038209)
@@ -5,8 +5,8 @@
 const email = "moonjar@gmail.com"
 const messagePath = "/app/busking"
 // const socket = new SockJS("ws://127.0.0.1:8080")
-const stompClient = new StompJS.Client({
-    brokerURL:"ws://127.0.0.1:8080/busking"
+export const stompClient = new StompJS.Client({
+    brokerURL:"ws://127.0.0.1:8080/signal"
 });
 const video = document.querySelector("video");
 const constraints = {video: true, audio: false}
@@ -26,13 +26,6 @@
     pc = new RTCPeerConnection(pcConfig);
 }
 
-const sendMessage = (message) =>{
-    stompClient.publish({
-        destination : messagePath+"/test",
-        body: message,
-        headers:{}
-    })
-}
 
 const cameraOn = () => {
     navigator.mediaDevices.getUserMedia(constraints)
@@ -70,15 +63,15 @@
 
 const broadCast = async () => {
     console.log("방송 버튼 눌림")
-    sendMessage("hello world")
-    sendMessage("방송버튼 눌림")
-    pc.createOffer()
-        .then(sdp => pc.setLocalDescription(sdp))
-        .catch(error => console.log(error));
-    // pc.onicecandidate
+    sendMessage({"test":"hello world"})
+    sendMessage({"test":"방송버튼 눌림"})
+    // pc.createOffer()
+    //     .then(sdp => pc.setLocalDescription(sdp))
+    //     .catch(error => console.log(error));
+    // pc.onicecandidate = ({event} => {
+    //     if (event.candidate)
+    // })
 
-    // let rtcSessionDescription =  await pc.setLocalDescription();
-    // pc.setRemoteDescription(rtcSessionDescription).then(r => );
 }
 
 const stompInit = () => {
@@ -86,14 +79,15 @@
     if ( typeof WebSocket !== 'function'){
         console.log("no websocket")
         stompClient.webSocketFactory = function (){
-            return new SockJS("ws://127.0.0.1:8080/busking")
+            return new SockJS("http://127.0.0.1:8080/busking")
         }
     }
 
     stompClient.onConnect = function (frame) {
         console.log(frame)
-        stompClient.subscribe("/audience", message =>
+        stompClient.subscribe("/audience/"+userNickName, message =>
         console.log(message))
+        sendMessage({"test":"test is success"})
     }
     stompClient.onStompError = function (frame) {
         console.log('Broker reported error: ' + frame.headers['message'])
@@ -102,6 +96,15 @@
 
     stompClient.activate()
 }
+
+const sendMessage = (message) =>{
+    stompClient.publish({
+        destination : "/app/busker",
+        body: JSON.stringify(message),
+        headers:{}
+    })
+}
+
 const iceServerInit=()=>{
     let iceServers = []
 
Index: FrontEnd/mint/src/broadCast.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FrontEnd/mint/src/broadCast.js b/FrontEnd/mint/src/broadCast.js
new file mode 100644
--- /dev/null	(date 1706502038212)
+++ b/FrontEnd/mint/src/broadCast.js	(date 1706502038212)
@@ -0,0 +1,3 @@
+import {stompClient} from "./index";
+
+console.log(stompClient);
\ No newline at end of file
diff --git a/FrontEnd/mint/src/watchStreaming.js b/FrontEnd/mint/src/watchStreaming.js
new file mode 100644
