Index: FrontEnd/src/pages/StreamingPage.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from \"react\";\r\nimport { styled, createGlobalStyle } from 'styled-components';\r\nimport ChatApp from \"../components/ChatApp\";\r\nimport VideoTmp from \"../components/VideoTmp\";\r\nimport StreamerList from \"../components/StreamerList\"\r\nimport Streaming from \"./Streaming\";\r\nimport Navbar from \"../components/Navbar\";\r\n\r\nconst Wrapper = styled.div`\r\n    overflow-y: hidden;\r\n`;\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 100%;\r\n    height: 100vh; // Use full screen height\r\n`;\r\n\r\nconst LeftBox = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 20%;\r\n    height: 100%;\r\n    background: black;\r\n\r\n`;\r\n\r\nconst EndButton = styled.button`\r\n    width: 230px;\r\n    height: 80px;\r\n    border-radius: 10px;\r\n    background: #F7B84B;\r\n    color: white;\r\n    font-size: 28px;\r\n`;\r\n\r\nconst MiddleBox = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 60%;\r\n    height: 100%;\r\n`;\r\n\r\nconst RightBox = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 25%;\r\n    height: 100%; // Full height\r\n    background: orange;\r\n`;\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    overflow: hidden;\r\n  }\r\n`;\r\n\r\nconst StreamingPage = () => {\r\n  \r\n  return (\r\n    <Wrapper>\r\n      <GlobalStyle />\r\n      <Container>\r\n        <LeftBox>\r\n          <p>카메라, 마이크 ON/OFF</p>\r\n          <EndButton>방송 종료</EndButton>\r\n        </LeftBox>\r\n        <MiddleBox>\r\n          <Streaming />\r\n        </MiddleBox>\r\n        <RightBox>\r\n          <ChatApp />\r\n        </RightBox>\r\n      </Container>\r\n    </Wrapper>   \r\n  );\r\n};\r\n\r\nexport default StreamingPage;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FrontEnd/src/pages/StreamingPage.jsx b/FrontEnd/src/pages/StreamingPage.jsx
--- a/FrontEnd/src/pages/StreamingPage.jsx	
+++ b/FrontEnd/src/pages/StreamingPage.jsx	
@@ -1,4 +1,4 @@
-import React from "react";
+import React, {useState} from "react";
 import { styled, createGlobalStyle } from 'styled-components';
 import ChatApp from "../components/ChatApp";
 import VideoTmp from "../components/VideoTmp";
@@ -59,17 +59,26 @@
 `;
 
 const StreamingPage = () => {
-  
+  const HandleEndButtonClick = () => {
+    const [isStreaming,setIsStreaming] = useState(true)
+    // Your logic for handling "방송 종료"
+    console.log('방송 종료 버튼이 눌렸습니다.');
+    setIsStreaming(false)
+
+    // You can pass this information to the Streaming component if needed
+  };
+
+
   return (
     <Wrapper>
       <GlobalStyle />
       <Container>
         <LeftBox>
           <p>카메라, 마이크 ON/OFF</p>
-          <EndButton>방송 종료</EndButton>
+          <EndButton onClick={HandleEndButtonClick}>방송 종료</EndButton>
         </LeftBox>
         <MiddleBox>
-          <Streaming />
+          <Streaming isStreaming={isStreaming} />
         </MiddleBox>
         <RightBox>
           <ChatApp />
Index: FrontEnd/src/pages/Streaming.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useRef, useState} from \"react\";\r\nimport CustomText from \"../components/CustomText\";\r\nimport {PCConfig} from \"../WebRTC/RTCConfig\";\r\nimport * as StompJS from \"@stomp/stompjs\";\r\nimport * as SockJS from \"sockjs-client\";\r\nimport {koreaTime} from \"../WebRTC/PCEvent\";\r\nimport {useRecoilState} from \"recoil\";\r\nimport {userInfoState} from \"../RecoilState/userRecoilState\";\r\n\r\n// const userId = \"buskerID\"\r\nlet makingOffer = false\r\n\r\n// 대체 왜 이게 2번이나 마운트되는거야?\r\nconst Streaming = () => {\r\n    const [userInfo, setUserInfo] = useRecoilState(userInfoState);\r\n    const pcRef = useRef(new RTCPeerConnection(PCConfig));\r\n    const clientRef = useRef(\r\n        new StompJS.Client({\r\n            brokerURL: \"ws://127.0.0.1:8080/signal\",\r\n        })\r\n    );\r\n    const pc = pcRef.current;\r\n    const client = clientRef.current;\r\n    const userId = userInfo.userId\r\n    const candidateList = []\r\n\r\n    // Set Peer Connection\r\n    useEffect(() => {\r\n        console.log(\"userId : \" + userId)\r\n        const videoElement = document.getElementById(\"streamingVideo\")\r\n        pc.onicecandidate = (event) => { //setLocalDescription이 불러옴.\r\n            // 이걸 좀 이따가 실행해야 하는뎅...\r\n            if (event.candidate) {\r\n                console.log(\"Client Send Ice Candidate : [ \" + event.candidate.candidate + \" ] \")\r\n                // candidateList.push({iceCandidate: event.candidate})\r\n                client.publish({\r\n                    destination: `/app/busker/${userId}/iceCandidate`,\r\n                    body: JSON.stringify({iceCandidate: event.candidate})\r\n                });\r\n            }\r\n            if ( event.target.iceGatheringState === 'complete') {\r\n                console.log('done gathering candidates - got iceGatheringState complete');\r\n            }\r\n        }\r\n        pc.oniceconnectionstatechange = (event) => {\r\n            if (pc.iceConnectionState === 'new'){\r\n                console.log(koreaTime +' 피어 연결을 시작 합니다. ')\r\n            }\r\n            console.log(koreaTime +' ICE 연결 상태:', pc.iceConnectionState);\r\n            if (pc.iceConnectionState === 'connected') {\r\n                console.log(pc.getStats().then(r=> console.log(koreaTime+\" \"+r)))\r\n                console.log(koreaTime +' 피어 간 연결이 성공적으로 수립되었습니다.');\r\n            } else if (pc.iceConnectionState === 'disconnected'){\r\n\r\n                console.log(koreaTime +' 피어 간 연결이  끊어졌습니다.')\r\n            } else if(pc.iceConnectionState === 'failed') {\r\n                pc.restartIce()\r\n                console.log(koreaTime +' 피어 간 연결이  실패.');\r\n            }\r\n        };\r\n        pc.onconnectionstatechange = (event) => { // 데이터 연결 상태 확인\r\n            console.log('데이터 연결 상태:', pc.connectionState);\r\n            if (pc.connectionState === 'connected') {\r\n                console.log(koreaTime +' 데이터 연결이 확립되었습니다.');\r\n            } else if (pc.connectionState === 'disconnected') {\r\n                console.log(koreaTime +' 데이터 연결이 끊어졌습니다.');\r\n            }\r\n        };\r\n        pc.onnegotiationneeded = (event) => {\r\n            console.log(koreaTime+ \" Negotiation을 진행합니다.\")\r\n            makingOffer = true\r\n            pc.createOffer({\r\n            })\r\n                .then((offer) => {\r\n                    console.log(\"sdp offer created\") // sdp status\r\n                    pc.setLocalDescription(offer)\r\n                        .then((r) => {\r\n                            client.publish({\r\n                                destination: `/app/busker/${userId}/offer`,\r\n                                body: JSON.stringify({\r\n                                    userId,\r\n                                    offer,\r\n                                })\r\n                            })\r\n                            makingOffer = false\r\n                        })\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n\r\n        const constraints = {video: true, audio: false}\r\n\r\n         navigator.mediaDevices.getUserMedia(constraints)\r\n            .then((stream) => {\r\n                for (const track of stream.getTracks()){\r\n                    pc.addTrack(track,stream)\r\n                }\r\n                console.log(\"buskerId : \"+ userId)\r\n                videoElement.srcObject = stream\r\n            }).catch(error => {\r\n                if (error.name === \"OverconstrainedError\") {\r\n                    console.error(\r\n                        `The resolution ${constraints.video.width.exact}x${constraints.video.height.exact} px is not supported by your device.`,\r\n                    );\r\n                } else if (error.name === \"NotAllowedError\") {\r\n                    console.error(\"You need to grant this page permission to access your camera and microphone.\",);\r\n                } else {\r\n                    console.error(`getUserMedia error: ${error.name}`, error);\r\n                }\r\n        })\r\n\r\n        if (typeof WebSocket !== 'function') {\r\n            client.webSocketFactory = function () {\r\n                console.log(\"Stomp error sockjs is running\");\r\n                return new SockJS('http://127.0.0.1:8080/signal');\r\n            };\r\n        }\r\n\r\n        client.onConnect = (frame) => {\r\n            console.log(frame);\r\n            // sdpOffer를 보내고 Answer를 받음\r\n            client.subscribe(`/busker/${userId}/sdpAnswer`, (res) => {\r\n                const offerResponse = JSON.parse(res.body);\r\n                const answerId = offerResponse.id;\r\n                const response = offerResponse.response;\r\n                const sdpAnswer = offerResponse.sdpAnswer;\r\n\r\n                // console.log(\"Received SDP Answer \\n\");\r\n                console.log(\"Received SDP Answer \\n\"+offerResponse)\r\n                pc.setRemoteDescription({\r\n                    type: \"answer\",\r\n                    sdp: sdpAnswer\r\n                }).then(() => {\r\n                    console.log(\"Remote description set successfully\");\r\n                }).catch((error) => {\r\n                    console.error(\"Error setting remote description:\", error);\r\n                });\r\n            });\r\n\r\n            // client.subscribe(`/busker/${userId}/createSession`, (res) => {\r\n            //     if (res.body === \"created\"){\r\n            //         for (const candidateListElement of candidateList) {\r\n            //             client.publish({\r\n            //                 destination: `/app/busker/${userId}/iceCandidate`,\r\n            //                 body: JSON.stringify({iceCandidate: candidateListElement.candidate})\r\n            //             });\r\n            //         }\r\n            //     }\r\n            // });\r\n\r\n            // IceCandidate 받음.\r\n            client.subscribe(`/busker/${userId}/iceCandidate`, (res) => {\r\n                const iceResponse = JSON.parse(res.body);\r\n                if (iceResponse.id === \"iceCandidate\") {\r\n                    console.log(koreaTime + \" server send ice \\n\" + iceResponse.candidate.candidate)\r\n                    const icecandidate = new RTCIceCandidate(iceResponse.candidate)\r\n                    pc.addIceCandidate(icecandidate)\r\n                        .then()\r\n                }\r\n            })\r\n        }\r\n        client.onStompError = (frame) => {\r\n            console.log('Broker reported error: ' + frame.headers['message']);\r\n            console.log('Additional details: ' + frame.body);\r\n        };\r\n\r\n        client.activate();\r\n\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            <video id=\"streamingVideo\" style={{width: '100%'}} autoPlay controls></video>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Streaming;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FrontEnd/src/pages/Streaming.jsx b/FrontEnd/src/pages/Streaming.jsx
--- a/FrontEnd/src/pages/Streaming.jsx	
+++ b/FrontEnd/src/pages/Streaming.jsx	
@@ -11,7 +11,8 @@
 let makingOffer = false
 
 // 대체 왜 이게 2번이나 마운트되는거야?
-const Streaming = () => {
+const Streaming = ({ isStreaming }) => {
+    const [isStreaming, setIsStreaming] = useState(true);
     const [userInfo, setUserInfo] = useRecoilState(userInfoState);
     const pcRef = useRef(new RTCPeerConnection(PCConfig));
     const clientRef = useRef(
@@ -24,6 +25,7 @@
     const userId = userInfo.userId
     const candidateList = []
 
+
     // Set Peer Connection
     useEffect(() => {
         console.log("userId : " + userId)
@@ -138,19 +140,6 @@
                     console.error("Error setting remote description:", error);
                 });
             });
-
-            // client.subscribe(`/busker/${userId}/createSession`, (res) => {
-            //     if (res.body === "created"){
-            //         for (const candidateListElement of candidateList) {
-            //             client.publish({
-            //                 destination: `/app/busker/${userId}/iceCandidate`,
-            //                 body: JSON.stringify({iceCandidate: candidateListElement.candidate})
-            //             });
-            //         }
-            //     }
-            // });
-
-            // IceCandidate 받음.
             client.subscribe(`/busker/${userId}/iceCandidate`, (res) => {
                 const iceResponse = JSON.parse(res.body);
                 if (iceResponse.id === "iceCandidate") {
@@ -168,8 +157,15 @@
 
         client.activate();
 
-    }, []);
+    }, [isStreaming]);
 
+    const handleEndButtonClick = () => {
+        // Call the onEndButtonClick callback
+        onEndButtonClick();
+
+        // Update state to stop streaming
+        setIsStreaming(false);
+    };
 
     return (
         <>
